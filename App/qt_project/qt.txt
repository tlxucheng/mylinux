https://blog.csdn.net/qq_34139994/article/details/97641171  //书籍

https://blog.csdn.net/Thinkerlife/article/details/78828986
https://blog.csdn.net/xuewu0zhijing/article/details/105255606
https://www.bbsmax.com/A/x9J263kjJ6/
https://www.yuanmas.com/info/EkyQWBkzvq.html
https://blog.csdn.net/GoForwardToStep/article/details/54583152?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param
https://www.cnblogs.com/Braveliu/p/7423629.html

mysql
//代码
https://blog.csdn.net/c05170519/article/details/6704501   
https://blog.csdn.net/kilotwo/article/details/79248657     
https://www.cnblogs.com/weizhixiang/p/6076680.html

//库加载
https://www.cnblogs.com/xtu-wlf1212/p/8764015.html   
https://blog.csdn.net/seven_dj/article/details/25395423 
https://blog.csdn.net/weixin_30497527/article/details/98088805?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param
https://blog.csdn.net/yan_susu/article/details/82927810


    inline QVariant value() const   调用了vector
    { return val; }
	
	
	struct QMyField
    {
        QMyField()
            : outField(0), nullIndicator(false), bufLength(0ul),
              myField(0), type(QVariant::Invalid)
        {}
        char *outField;
        my_bool nullIndicator;
        ulong bufLength;
        MYSQL_FIELD *myField;
        QVariant::Type type;
    };

    QVector<QMyField> fields;
	
	bool QMYSQLResult::reset (const QString& query)  // qsql_mysql.cpp
	
	QVariant QMYSQLResult::data(int field)
	
	class Q_SQL_EXPORT QSqlQuery
    {
	        const QSqlResult* result() const;
	    private:
        QSqlQueryPrivate* d;
	}
	
	class Q_SQL_EXPORT QSqlResult
    {
	

	}
	
	class QMYSQLResult : public QSqlResult
    {
	    private:
        QMYSQLResultPrivate* d;
	}
	
	class QMYSQLResultPrivate
	{
	        MYSQL_RES *result;
	}
	
srv*http://msdl.microsoft.com/download/symbols
cache*C:\Users\xucheng\AppData\Local\Temp\QtCreator-oIoHPI\symbolcache

    QPushButton *button = new QPushButton("Quit");
    QObject::connect(button, SIGNAL(clicked()), &a, SLOT(quit()));
	
	
0x0000009aef4ff190
0x0000009aef4ff190

严重性	代码	说明	项目	文件	行	禁止显示状态
警告	C4267	“参数”: 从“size_t”转换到“unsigned long”，可能丢失数据	DbEasyApi	d:\project\my_cpp\dbeasyapi\dbeasyapi\mysqlresult.cpp	11	

1>------ 已启动生成: 项目: DbEasyApi, 配置: Debug x64 ------
1>  MySqlResult.cpp
1>d:\project\my_cpp\dbeasyapi\dbeasyapi\mysqlresult.cpp(12): warning C4267: “参数”: 从“size_t”转换到“unsigned long”，可能丢失数据
1>d:\project\my_cpp\dbeasyapi\dbeasyapi\mysqlresult.cpp(37): warning C4244: “初始化”: 从“my_ulonglong”转换到“int”，可能丢失数据
1>  DbEasyApi.vcxproj -> D:\project\my_cpp\DbEasyApi\x64\Debug\DbEasyApi.exe
1>  DbEasyApi.vcxproj -> D:\project\my_cpp\DbEasyApi\x64\Debug\DbEasyApi.pdb (Full PDB)
	
	

/**************Qt MySQL 类设计****************/
1. driver类
class QSqlDriver
{
protected:
    QSqlDriver(QSqlDriverPrivate &dd, QObject *parent = 0);  /* 什么含义？ */
};

class QMYSQLDriver : public QSqlDriver
{

};

class QSqlDatabase
{
public:
    QSqlDriver* driver() const;

private:
    QSqlDriver* driver;
    QString dbname;
    QString uname;
    QString pword;
    QString hname;
    QString drvName;
}

class QMYSQLDriverPrivate : public QSqlDriverPrivate
{
    MYSQL *mysql;
}

(1)open在QSqlDriver为纯虚函数
(2)QMYSQLDriver::open中申请 mysql 句柄指针
(3)QSqlDatabase通过driver找到对应的类型，然后调用open申请对应的driver句柄
(4)QSqlDatabase::close()关闭句柄
(5)析构函数中delete driver
QSqlDatabasePrivate::~QSqlDatabasePrivate()
{
    if (driver != shared_null()->driver)
        delete driver;
}
(6)连接成功后设置为一个全局变量，加入到一个 dbDict 中
(7)如果tableModel连接是可以从 dbDict 中查询连接是否存在，存在则使用
QSqlDatabase QSqlDatabasePrivate::database(const QString& name, bool open)
{
    const QConnectionDict *dict = dbDict();
    Q_ASSERT(dict);

    dict->lock.lockForRead();
    QSqlDatabase db = dict->value(name);
    dict->lock.unlock();
    if (db.isValid() && !db.isOpen() && open) {
        if (!db.open())
            qWarning() << "QSqlDatabasePrivate::database: unable to open database:" << db.lastError().text();

    }
    return db;
}

2. result类
class QSqlResult
{
public:
    QSqlDriver *sqldriver;
}

class QMYSQLResult : public QSqlResult
{
private:
    const QMYSQLDriver* driver;
    MYSQL_RES *result;
    MYSQL_ROW row
  
    QVector<QMyField> fields;
}

3. QSqlQuery 查询类 
class QSqlQuery
{
    QSqlResult* sqlResult;
};

3. tableModel 类
class QSqlTableModel: public QSqlQueryModel
{
public:
    explicit QSqlTableModel(QObject *parent = 0, QSqlDatabase db = QSqlDatabase());

protected:
    QSqlTableModel(QSqlTableModelPrivate &dd, QObject *parent = 0, QSqlDatabase db = QSqlDatabase());

public Q_SLOTS:
    virtual bool select();

};

(1)select 函数先构造查询语句，然后获取一个db
(2)db 保存查询结果
(3)查询赋值方法
QSqlQuery::QSqlQuery(const QString& query, QSqlDatabase db)
{
    d = QSqlQueryPrivate::shared_null();
    qInit(this, query, db);
}


















	
	
	