https://blog.csdn.net/qq_34139994/article/details/97641171  //书籍

https://blog.csdn.net/Thinkerlife/article/details/78828986
https://blog.csdn.net/xuewu0zhijing/article/details/105255606
https://www.bbsmax.com/A/x9J263kjJ6/
https://www.yuanmas.com/info/EkyQWBkzvq.html
https://blog.csdn.net/GoForwardToStep/article/details/54583152?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param
https://www.cnblogs.com/Braveliu/p/7423629.html

mysql
//代码
https://blog.csdn.net/c05170519/article/details/6704501   
https://blog.csdn.net/kilotwo/article/details/79248657     
4
//库加载
https://www.cnblogs.com/xtu-wlf1212/p/8764015.html   
https://blog.csdn.net/seven_dj/article/details/25395423 
https://blog.csdn.net/weixin_30497527/article/details/98088805?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param
https://blog.csdn.net/yan_susu/article/details/82927810

QTableView
https://blog.csdn.net/qq769651718/article/details/79357938

https://www.cnblogs.com/Manual-Linux/p/9679342.html

MVC
https://blog.csdn.net/qq_33232152/article/details/93777460

Qt布局
网格布局
https://blog.csdn.net/hyongilfmmm/article/details/83029184
https://www.mycode.net.cn/language/cpp/539.html

水平布局
https://blog.csdn.net/weixin_42837024/article/details/82114258 

垂直布局
https://blog.csdn.net/weixin_42837024/article/details/82114716

综合布局
https://blog.csdn.net/li162001/article/details/88126928?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase


Qt登录界面实现（UI, 不带最大按钮）
https://blog.csdn.net/guorong520/article/details/89213769

C++
new QGridLayout() 和 new QGridLayout的区别

参数传递方式
https://blog.csdn.net/liang841451955/article/details/80241074

Mysql在线手册
https://dev.mysql.com/doc/c-api/5.7/en/c-api-prepared-statement-type-codes.html

0	QStyledItemDelegate::displayText	qstyleditemdelegate.cpp	295	0x67f1678c	
1	QStyledItemDelegate::initStyleOption	qstyleditemdelegate.cpp	409	0x67f1746a	
2	QStyledItemDelegate::paint	qstyleditemdelegate.cpp	446	0x67f1758d	
3	QTableViewPrivate::drawCell	qtableview.cpp	930	0x67ed51b2	
4	QTableView::paintEvent	qtableview.cpp	1486	0x67ed73d3	
5	QWidget::event	qwidget.cpp	8117	0x67cbf282	
6	QFrame::event	qframe.cpp	534	0x67dc3788	
7	QAbstractScrollArea::viewportEvent	qabstractscrollarea.cpp	1194	0x67e3dc66	
8	QAbstractItemView::viewportEvent	qabstractitemview.cpp	1689	0x67eb0246	
9	QAbstractScrollAreaPrivate::viewportEvent	qabstractscrollarea_p.h	110	0x67ff2d10	
10	QAbstractScrollAreaFilter::eventFilter	qabstractscrollarea_p.h	126	0x67ff1f89	
11	QCoreApplicationPrivate::sendThroughObjectEventFilters	qcoreapplication.cpp	1031	0x15ea207	
12	QApplicationPrivate::notify_helper	qapplication.cpp	3495	0x67c8df3e	
13	QApplication::notify	qapplication.cpp	3464	0x67c8dde5	
14	QCoreApplication::notifyInternal	qcoreapplication.cpp	935	0x15e9eee	
15	QCoreApplication::sendSpontaneousEvent	qcoreapplication.h	240	0x67fd6af1	
16	QWidgetPrivate::drawWidget	qwidget.cpp	5157	0x67cb7cfa	
17	QWidgetPrivate::paintSiblingsRecursive	qwidget.cpp	5340	0x67cb892e	
18	QWidgetPrivate::paintSiblingsRecursive	qwidget.cpp	5327	0x67cb87ff	
19	QWidgetPrivate::paintSiblingsRecursive	qwidget.cpp	5327	0x67cb87ff	
20	QWidgetPrivate::paintSiblingsRecursive	qwidget.cpp	5327	0x67cb87ff	
...	<更多>				

获取data
0	QSqlQuery::value	qsqlquery.cpp	422	0x67942038	
1	QSqlQueryModel::data	qsqlquerymodel.cpp	364	0x6794c374	
2	QSqlTableModel::data	qsqltablemodel.cpp	481	0x6794eab5	
3	QModelIndex::data	qabstractitemmodel.h	497	0x1313c93	
4	QStyledItemDelegate::initStyleOption	qstyleditemdelegate.cpp	406	0x11b73c6	
5	QStyledItemDelegate::paint	qstyleditemdelegate.cpp	446	0x11b758d	
6	QTableViewPrivate::drawCell	qtableview.cpp	930	0x11751b2	
7	QTableView::paintEvent	qtableview.cpp	1486	0x11773d3	
8	QWidget::event	qwidget.cpp	8117	0xf5f282	
9	QFrame::event	qframe.cpp	534	0x1063788	
10	QAbstractScrollArea::viewportEvent	qabstractscrollarea.cpp	1194	0x10ddc66	
11	QAbstractItemView::viewportEvent	qabstractitemview.cpp	1689	0x1150246	
12	QAbstractScrollAreaPrivate::viewportEvent	qabstractscrollarea_p.h	110	0x1292d10	
13	QAbstractScrollAreaFilter::eventFilter	qabstractscrollarea_p.h	126	0x1291f89	
14	QCoreApplicationPrivate::sendThroughObjectEventFilters	qcoreapplication.cpp	1031	0x6b92a207	
15	QApplicationPrivate::notify_helper	qapplication.cpp	3495	0xf2df3e	
16	QApplication::notify	qapplication.cpp	3464	0xf2dde5	
17	QCoreApplication::notifyInternal	qcoreapplication.cpp	935	0x6b929eee	
18	QCoreApplication::sendSpontaneousEvent	qcoreapplication.h	240	0x1276af1	
19	QWidgetPrivate::drawWidget	qwidget.cpp	5157	0xf57cfa	
20	QWidgetPrivate::paintSiblingsRecursive	qwidget.cpp	5340	0xf5892e	
...	<更多>				


MVC原理与类的关系
QSqlTableModel *model = new QSqlTableModel;
QTableView *view = new QTableView;
view->setModel(model);

class Q_CORE_EXPORT QAbstractItemModel : public QObject
{
};

class Q_WIDGETS_EXPORT QAbstractItemView : public QAbstractScrollArea
{
        QAbstractItemModel *model() const;
};

class Q_WIDGETS_EXPORT QTableView : public QAbstractItemView
{
};

class Q_WIDGETS_EXPORT QAbstractItemDelegate : public QObject
{
};

class Q_SQL_EXPORT QSqlQueryModel: public QAbstractTableModel
{
};

class QSqlTableModel : public QSqlQueryModel
{
private:
    class QSqlTableModelPrivate;
};

class QSqlTableModelPrivate
{
public:
    QSqlDatabase db;

};

QSqlDatabasePrivate *QSqlDatabasePrivate::shared_null()
{
    static QSqlNullDriver dr;
    static QSqlDatabasePrivate n(NULL, &dr);
    return &n;
}

如何实现QSqlDatabase类
https://blog.csdn.net/npy_lp/article/details/108768030
https://www.cnblogs.com/findumars/p/10392770.html
https://hewei.blog.csdn.net/article/details/78712397   // Qt--Q_GLOBAL_STATIC

C++ 单例模式
https://blog.csdn.net/AA__AA1122/article/details/52124309?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.compare&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.compare

Qt 单例模式实现
https://blog.csdn.net/npy_lp/article/details/108768030

返回局部变量
https://www.cnblogs.com/vivian187/p/12698438.html

C++ new a与new a()有什么区别
https://blog.csdn.net/zy47675676/article/details/88909388?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.compare&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.compare

C++ 智能指针
https://www.cyhone.com/articles/right-way-to-use-cpp-smart-pointer/

C++
严重性	代码	说明	项目	文件	行	禁止显示状态
错误	C2352	“Sqldatabase::addDatabase”: 非静态成员函数的非法调用	DbEasyApi	d:\project\my_cpp\dbeasyapi\dbeasyapi\dbeasyapi.cpp	241	

QT
new QLCDNumber(this) 与 new QLCDNumber的区别

C++ 
lamda表达式

QT
emit

C语言如何实现万能数据类型

    inline QVariant value() const   调用了vector
    { return val; }
	
	
	struct QMyField
    {
        QMyField()
            : outField(0), nullIndicator(false), bufLength(0ul),
              myField(0), type(QVariant::Invalid)
        {}
        char *outField;
        my_bool nullIndicator;
        ulong bufLength;
        MYSQL_FIELD *myField;
        QVariant::Type type;
    };

    QVector<QMyField> fields;
	
	bool QMYSQLResult::reset (const QString& query)  // qsql_mysql.cpp
	
	QVariant QMYSQLResult::data(int field)
	
	class Q_SQL_EXPORT QSqlQuery
    {
	        const QSqlResult* result() const;
	    private:
        QSqlQueryPrivate* d;
	}
	
	class Q_SQL_EXPORT QSqlResult
    {
	

	}
	
	class QMYSQLResult : public QSqlResult
    {
	    private:
        QMYSQLResultPrivate* d;
	}
	
	class QMYSQLResultPrivate
	{
	        MYSQL_RES *result;
	}
	
srv*http://msdl.microsoft.com/download/symbols
cache*C:\Users\xucheng\AppData\Local\Temp\QtCreator-oIoHPI\symbolcache

    QPushButton *button = new QPushButton("Quit");
    QObject::connect(button, SIGNAL(clicked()), &a, SLOT(quit()));
	
	
0x0000009aef4ff190
0x0000009aef4ff190



/**************Qt MySQL 类设计****************/
1. driver类
class QSqlDriver
{
protected:
    QSqlDriver(QSqlDriverPrivate &dd, QObject *parent = 0);  /* 什么含义？ */
};

class QMYSQLDriver : public QSqlDriver
{

};

class QSqlDatabase
{
public:
    QSqlDriver* driver() const;

private:
    QSqlDriver* driver;
    QString dbname;
    QString uname;
    QString pword;
    QString hname;
    QString drvName;
}

class QMYSQLDriverPrivate : public QSqlDriverPrivate
{
    MYSQL *mysql;
}

(1)open在QSqlDriver为纯虚函数
(2)QMYSQLDriver::open中申请 mysql 句柄指针
(3)QSqlDatabase通过driver找到对应的类型，然后调用open申请对应的driver句柄
(4)QSqlDatabase::close()关闭句柄
(5)析构函数中delete driver
QSqlDatabasePrivate::~QSqlDatabasePrivate()
{
    if (driver != shared_null()->driver)
        delete driver;
}
(6)连接成功后设置为一个全局变量，加入到一个 dbDict 中
(7)如果tableModel连接是可以从 dbDict 中查询连接是否存在，存在则使用
QSqlDatabase QSqlDatabasePrivate::database(const QString& name, bool open)
{
    const QConnectionDict *dict = dbDict();
    Q_ASSERT(dict);

    dict->lock.lockForRead();
    QSqlDatabase db = dict->value(name);
    dict->lock.unlock();
    if (db.isValid() && !db.isOpen() && open) {
        if (!db.open())
            qWarning() << "QSqlDatabasePrivate::database: unable to open database:" << db.lastError().text();

    }
    return db;
}

2. result类
class QSqlResult
{
public:
    QSqlDriver *sqldriver;
}

class QMYSQLResult : public QSqlResult
{
private:
    const QMYSQLDriver* driver;
    MYSQL_RES *result;
    MYSQL_ROW row
  
    QVector<QMyField> fields;
}

3. QSqlQuery 查询类 
class QSqlQuery
{
    QSqlResult* sqlResult;
};

3. tableModel 类
class QSqlTableModel: public QSqlQueryModel
{
public:
    explicit QSqlTableModel(QObject *parent = 0, QSqlDatabase db = QSqlDatabase());

protected:
    QSqlTableModel(QSqlTableModelPrivate &dd, QObject *parent = 0, QSqlDatabase db = QSqlDatabase());

public Q_SLOTS:
    virtual bool select();

};

构造SQL语句
const QString query = selectStatement();

QSqlRecord类
class Q_SQL_EXPORT QSqlRecord
{
private:
    QSqlRecordPrivate* d;
};


/*****************important*************************/
(1)select 函数先构造查询语句，然后获取一个db
(2)db 保存查询结果
(3)查询赋值方法
QSqlQuery::QSqlQuery(const QString& query, QSqlDatabase db)
{
    d = QSqlQueryPrivate::shared_null();
    qInit(this, query, db);
}

class QSqlQuery
{
    const QSqlResult* result() const;
    QVariant value(int i) const;

};

class QSqlResult
{

};

查询完了先设置字段
0	QSqlQuery::record	qsqlquery.cpp	909	0x67942a54	
1	QSqlQueryModel::setQuery	qsqlquerymodel.cpp	416	0x6794c5da	
2	QSqlTableModel::setQuery	qsqltablemodel.cpp	608	0x6794f205	
3	QSqlTableModel::select	qsqltablemodel.cpp	377	0x6794e23c	
4	show_data_by_view	main.cpp	74	0x401d49	
5	qMain	main.cpp	152	0x402a9c	
6	WinMain*16	qtmain_win.cpp	131	0x403f3b	
7	main			0x40597d	

展示模型时再取数据
先调用QMYSQLResult::fetch 将mysql数据赋值到 d->row
再调用QMYSQLResult::data 将d->row转化为QVariant

0	QMYSQLResult::data	qsql_mysql.cpp	593	0x6ad82bb5	
1	QSqlQuery::value	qsqlquery.cpp	422	0x67942060	
2	QSqlQueryModel::data	qsqlquerymodel.cpp	364	0x6794c374	
3	QSqlTableModel::data	qsqltablemodel.cpp	481	0x6794eab5	
4	<function called from gdb>			0x6db1ff	
5	QMYSQLResult::fetch	qsql_mysql.cpp	482	0x6ad826a5	
6	QSqlQuery::seek	qsqlquery.cpp	604	0x67942518	
7	QSqlQueryModel::data	qsqlquerymodel.cpp	359	0x6794c2fe	
8	QSqlTableModel::data	qsqltablemodel.cpp	481	0x6794eab5	
9	<function called from gdb>			0x6db38f	
10	QSqlQueryModel::data	qsqlquerymodel.cpp	364	0x6794c353	
11	QSqlTableModel::data	qsqltablemodel.cpp	481	0x6794eab5	
12	<function called from gdb>			0x6db47f	
13	QMYSQLResult::fetch	qsql_mysql.cpp	482	0x6ad826a5	
14	QSqlQuery::seek	qsqlquery.cpp	604	0x67942518	
15	QSqlQueryModel::data	qsqlquerymodel.cpp	359	0x6794c2fe	
16	QSqlTableModel::data	qsqltablemodel.cpp	481	0x6794eab5	
17	<function called from gdb>			0x6db60f	
18	QSqlQueryModel::data	qsqlquerymodel.cpp	364	0x6794c353	
19	QSqlTableModel::data	qsqltablemodel.cpp	481	0x6794eab5	
20	<function called from gdb>			0x6db6ff	
21	QMYSQLResult::fetch	qsql_mysql.cpp	482	0x6ad826a5	
22	QSqlQuery::seek	qsqlquery.cpp	604	0x67942518	
23	QSqlQueryModel::data	qsqlquerymodel.cpp	359	0x6794c2fe	
24	QSqlTableModel::data	qsqltablemodel.cpp	481	0x6794eab5	
25	<function called from gdb>			0x6db88f	
26	QSqlQueryModel::data	qsqlquerymodel.cpp	364	0x6794c353	
27	QSqlTableModel::data	qsqltablemodel.cpp	481	0x6794eab5	
28	QModelIndex::data	qabstractitemmodel.h	497	0x1283c93	
29	QStyledItemDelegate::initStyleOption	qstyleditemdelegate.cpp	406	0x11273c6	
30	QStyledItemDelegate::paint	qstyleditemdelegate.cpp	446	0x112758d	
31	QTableViewPrivate::drawCell	qtableview.cpp	930	0x10e51b2	
32	QTableView::paintEvent	qtableview.cpp	1486	0x10e73d3	
33	QWidget::event	qwidget.cpp	8117	0xecf282	
34	QFrame::event	qframe.cpp	534	0xfd3788	
35	QAbstractScrollArea::viewportEvent	qabstractscrollarea.cpp	1194	0x104dc66	
36	QAbstractItemView::viewportEvent	qabstractitemview.cpp	1689	0x10c0246	
37	QAbstractScrollAreaPrivate::viewportEvent	qabstractscrollarea_p.h	110	0x1202d10	
38	QAbstractScrollAreaFilter::eventFilter	qabstractscrollarea_p.h	126	0x1201f89	
39	QCoreApplicationPrivate::sendThroughObjectEventFilters	qcoreapplication.cpp	1031	0x6b92a207	
40	QApplicationPrivate::notify_helper	qapplication.cpp	3495	0xe9df3e	
41	QApplication::notify	qapplication.cpp	3464	0xe9dde5	
42	QCoreApplication::notifyInternal	qcoreapplication.cpp	935	0x6b929eee	
43	QCoreApplication::sendSpontaneousEvent	qcoreapplication.h	240	0x11e6af1	
44	QWidgetPrivate::drawWidget	qwidget.cpp	5157	0xec7cfa	
45	QWidgetPrivate::paintSiblingsRecursive	qwidget.cpp	5340	0xec892e	
46	QWidgetPrivate::paintSiblingsRecursive	qwidget.cpp	5327	0xec87ff	
47	QWidgetPrivate::paintSiblingsRecursive	qwidget.cpp	5327	0xec87ff	
48	QWidgetPrivate::paintSiblingsRecursive	qwidget.cpp	5327	0xec87ff	
49	QWidgetPrivate::paintSiblingsRecursive	qwidget.cpp	5327	0xec87ff	
50	QWidgetPrivate::paintSiblingsRecursive	qwidget.cpp	5327	0xec87ff	
51	QWidgetPrivate::drawWidget	qwidget.cpp	5209	0xec80f7	
52	QWidgetBackingStore::doSync	qwidgetbackingstore.cpp	1188	0xea43bf	
53	QWidgetBackingStore::sync	qwidgetbackingstore.cpp	956	0xea31b8	
54	QWidgetPrivate::syncBackingStore	qwidget.cpp	1700	0xebfcb7	
55	QWidgetWindow::handleExposeEvent	qwidgetwindow.cpp	730	0xee8922	
56	QWidgetWindow::event	qwidgetwindow.cpp	224	0xee6862	
57	QApplicationPrivate::notify_helper	qapplication.cpp	3499	0xe9df61	
58	QApplication::notify	qapplication.cpp	2952	0xe9ba13	
59	QCoreApplication::notifyInternal	qcoreapplication.cpp	935	0x6b929eee	
60	QCoreApplication::sendSpontaneousEvent	qcoreapplication.h	240	0xacd725d	
61	QGuiApplicationPrivate::processExposeEvent	qguiapplication.cpp	2575	0xa9fa8a6	
62	QGuiApplicationPrivate::processWindowSystemEvent	qguiapplication.cpp	1613	0xa9f683f	
63	QWindowSystemInterface::sendWindowSystemEvents	qwindowsysteminterface.cpp	579	0xa9eaf06	
64	QWindowSystemInterface::flushWindowSystemEvents	qwindowsysteminterface.cpp	563	0xa9eaea9	
65	QWindowsWindow::handleWmPaint	qwindowswindow.cpp	1470	0x628461cf	
66	QWindowsContext::windowsProc	qwindowscontext.cpp	937	0x62906aad	
67	qWindowsWndProc*16	qwindowscontext.cpp	1165	0x6284d5c2	
68	USER32!AddClipboardFormatListener	C:\Windows\SysWOW64\user32.dll		0x779f451b	
69	USER32!CallWindowProcW	C:\Windows\SysWOW64\user32.dll		0x779d504c	
70	USER32!CallWindowProcW	C:\Windows\SysWOW64\user32.dll		0x779d4bea	
71	USER32!IsRectEmpty	C:\Windows\SysWOW64\user32.dll		0x779de23f	
72	ntdll!KiUserCallbackDispatcher	C:\Windows\SYSTEM32\ntdll.dll		0x77cf428d	
73	??			0x6ddda4	
74	USER32!DispatchMessageW	C:\Windows\SysWOW64\user32.dll		0x779d3f80	
75	QEventDispatcherWin32::processEvents	qeventdispatcher_win.cpp	794	0x6b979c99	
76	QWindowsGuiEventDispatcher::processEvents	qwindowsguieventdispatcher.cpp	80	0x6285cdf0	
77	QEventLoop::processEvents	qeventloop.cpp	136	0x6b927f94	
78	QEventLoop::exec	qeventloop.cpp	212	0x6b92822f	
79	QCoreApplication::exec	qcoreapplication.cpp	1188	0x6b92a53d	
80	QGuiApplication::exec	qguiapplication.cpp	1483	0xa9f6520	
81	QApplication::exec	qapplication.cpp	2744	0xe9b357	
82	qMain	main.cpp	155	0x402afa	
83	WinMain*16	qtmain_win.cpp	131	0x403f3b	
84	main			0x40597d	










	
	
	